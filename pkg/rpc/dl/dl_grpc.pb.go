// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DlClient is the client API for Dl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DlClient interface {
	DownloadPlatforms(ctx context.Context, in *PlatformsDownloadReq, opts ...grpc.CallOption) (Dl_DownloadPlatformsClient, error)
}

type dlClient struct {
	cc grpc.ClientConnInterface
}

func NewDlClient(cc grpc.ClientConnInterface) DlClient {
	return &dlClient{cc}
}

func (c *dlClient) DownloadPlatforms(ctx context.Context, in *PlatformsDownloadReq, opts ...grpc.CallOption) (Dl_DownloadPlatformsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dl_ServiceDesc.Streams[0], "/Dl/DownloadPlatforms", opts...)
	if err != nil {
		return nil, err
	}
	x := &dlDownloadPlatformsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dl_DownloadPlatformsClient interface {
	Recv() (*PlatformsDownloadStatus, error)
	grpc.ClientStream
}

type dlDownloadPlatformsClient struct {
	grpc.ClientStream
}

func (x *dlDownloadPlatformsClient) Recv() (*PlatformsDownloadStatus, error) {
	m := new(PlatformsDownloadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DlServer is the server API for Dl service.
// All implementations must embed UnimplementedDlServer
// for forward compatibility
type DlServer interface {
	DownloadPlatforms(*PlatformsDownloadReq, Dl_DownloadPlatformsServer) error
	mustEmbedUnimplementedDlServer()
}

// UnimplementedDlServer must be embedded to have forward compatible implementations.
type UnimplementedDlServer struct {
}

func (UnimplementedDlServer) DownloadPlatforms(*PlatformsDownloadReq, Dl_DownloadPlatformsServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadPlatforms not implemented")
}
func (UnimplementedDlServer) mustEmbedUnimplementedDlServer() {}

// UnsafeDlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DlServer will
// result in compilation errors.
type UnsafeDlServer interface {
	mustEmbedUnimplementedDlServer()
}

func RegisterDlServer(s grpc.ServiceRegistrar, srv DlServer) {
	s.RegisterService(&Dl_ServiceDesc, srv)
}

func _Dl_DownloadPlatforms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlatformsDownloadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DlServer).DownloadPlatforms(m, &dlDownloadPlatformsServer{stream})
}

type Dl_DownloadPlatformsServer interface {
	Send(*PlatformsDownloadStatus) error
	grpc.ServerStream
}

type dlDownloadPlatformsServer struct {
	grpc.ServerStream
}

func (x *dlDownloadPlatformsServer) Send(m *PlatformsDownloadStatus) error {
	return x.ServerStream.SendMsg(m)
}

// Dl_ServiceDesc is the grpc.ServiceDesc for Dl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dl",
	HandlerType: (*DlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadPlatforms",
			Handler:       _Dl_DownloadPlatforms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dl/dl.proto",
}
