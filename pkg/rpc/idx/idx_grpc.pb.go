// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package idx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdxClient is the client API for Idx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdxClient interface {
	PreparePlatforms(ctx context.Context, in *PreparePlatformsReq, opts ...grpc.CallOption) (Idx_PreparePlatformsClient, error)
}

type idxClient struct {
	cc grpc.ClientConnInterface
}

func NewIdxClient(cc grpc.ClientConnInterface) IdxClient {
	return &idxClient{cc}
}

func (c *idxClient) PreparePlatforms(ctx context.Context, in *PreparePlatformsReq, opts ...grpc.CallOption) (Idx_PreparePlatformsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Idx_ServiceDesc.Streams[0], "/Idx/PreparePlatforms", opts...)
	if err != nil {
		return nil, err
	}
	x := &idxPreparePlatformsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Idx_PreparePlatformsClient interface {
	Recv() (*PreparePlatformsStatus, error)
	grpc.ClientStream
}

type idxPreparePlatformsClient struct {
	grpc.ClientStream
}

func (x *idxPreparePlatformsClient) Recv() (*PreparePlatformsStatus, error) {
	m := new(PreparePlatformsStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IdxServer is the server API for Idx service.
// All implementations must embed UnimplementedIdxServer
// for forward compatibility
type IdxServer interface {
	PreparePlatforms(*PreparePlatformsReq, Idx_PreparePlatformsServer) error
	mustEmbedUnimplementedIdxServer()
}

// UnimplementedIdxServer must be embedded to have forward compatible implementations.
type UnimplementedIdxServer struct {
}

func (UnimplementedIdxServer) PreparePlatforms(*PreparePlatformsReq, Idx_PreparePlatformsServer) error {
	return status.Errorf(codes.Unimplemented, "method PreparePlatforms not implemented")
}
func (UnimplementedIdxServer) mustEmbedUnimplementedIdxServer() {}

// UnsafeIdxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdxServer will
// result in compilation errors.
type UnsafeIdxServer interface {
	mustEmbedUnimplementedIdxServer()
}

func RegisterIdxServer(s grpc.ServiceRegistrar, srv IdxServer) {
	s.RegisterService(&Idx_ServiceDesc, srv)
}

func _Idx_PreparePlatforms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PreparePlatformsReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IdxServer).PreparePlatforms(m, &idxPreparePlatformsServer{stream})
}

type Idx_PreparePlatformsServer interface {
	Send(*PreparePlatformsStatus) error
	grpc.ServerStream
}

type idxPreparePlatformsServer struct {
	grpc.ServerStream
}

func (x *idxPreparePlatformsServer) Send(m *PreparePlatformsStatus) error {
	return x.ServerStream.SendMsg(m)
}

// Idx_ServiceDesc is the grpc.ServiceDesc for Idx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Idx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Idx",
	HandlerType: (*IdxServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PreparePlatforms",
			Handler:       _Idx_PreparePlatforms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "idx/idx.proto",
}
